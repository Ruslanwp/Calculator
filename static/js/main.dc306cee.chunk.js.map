{"version":3,"sources":["App.tsx","Button.tsx","reportWebVitals.ts","index.tsx"],"names":["ButtonType","Button","props","button","handler","className","onClick","console","log","buttons","title","value","type","Number","Multiply","Divide","Add","Modulo","Equal","Subtract","Remove","Reset","Dot","App","useState","result","setResult","memory","setMemory","operator","setOperator","handlerByButtonType","str","state","slice","toString","includes","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc306cee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button } from './Button';\nimport './App.css';\n\nenum ButtonType {\n  Number = 'number',\n  Reset = 'reset',\n  Remove = 'remove',\n  Multiply = 'multiply',\n  Divide = 'divide',\n  Subtract = 'subtract',\n  Add = 'add',\n  Equal = 'equal',\n  Modulo = 'modulo',\n  Dot = 'dot',\n}\n\ninterface Button {\n  title: string,\n  value?: number,\n  type: ButtonType,\n}\n\nconst buttons = [\n  {\n    title: '1',\n    value: 1,\n    type: ButtonType.Number,\n  },\n  {\n    title: '2',\n    value: 2,\n    type: ButtonType.Number,\n  },\n  {\n    title: '3',\n    value: 3,\n    type: ButtonType.Number,\n  },\n  {\n    title: '*',\n    type: ButtonType.Multiply,\n  },\n  {\n    title: '4',\n    value: 4,\n    type: ButtonType.Number,\n  },\n  {\n    title: '5',\n    value: 5,\n    type: ButtonType.Number,\n  },\n  {\n    title: '6',\n    value: 6,\n    type: ButtonType.Number,\n  },\n  {\n    title: '/',\n    type: ButtonType.Divide,\n  },\n  {\n    title: '7',\n    value: 7,\n    type: ButtonType.Number,\n  },\n  {\n    title: '8',\n    value: 8,\n    type: ButtonType.Number,\n  },\n  {\n    title: '9',\n    value: 9,\n    type: ButtonType.Number,\n  },\n  {\n    title: '+',\n    type: ButtonType.Add,\n  },\n  \n  {\n    title: '%',\n    type: ButtonType.Modulo,\n  },\n  {\n    title: '0',\n    value: 0,\n    type: ButtonType.Number,\n  },\n  {\n    title: '=',\n    type: ButtonType.Equal,\n  },\n  {\n    title: '-',\n    type: ButtonType.Subtract,\n  },\n  {\n    title: 'AC',\n    type: ButtonType.Remove,\n  },\n  \n  {\n    title: 'Clear',\n    type: ButtonType.Reset,\n  },\n  {\n    title: '.',\n    type: ButtonType.Dot,\n  },\n];\n\nconst App: React.FC = () => {\n  const [result, setResult] = useState('');\n  const [memory, setMemory] = useState(0)\n  const [operator, setOperator] = useState('');\n\n  const handlerByButtonType: Record<ButtonType, (str: string) => void> = {\n    [ButtonType.Number]: (str) => {\n      setResult(state => state + str)\n    },\n\n    [ButtonType.Remove]: () =>  setResult(result.slice(0, -1)),\n    [ButtonType.Reset]: () => setResult(''),\n    [ButtonType.Modulo]: () => setResult((Number(result) / 100).toString()),\n    [ButtonType.Dot]: (str) => {\n      if (!result.includes(str)) {\n        setResult(state => state + str)\n      }\n    },\n    [ButtonType.Multiply]: () => {\n      setOperator('*');\n      setMemory(+result);\n      setResult('');\n    },\n\n    [ButtonType.Divide]: () => {\n      setOperator('/');\n      setMemory(+result);\n      setResult('');\n    },\n\n    [ButtonType.Subtract]: () => {\n      setOperator('-');\n      setMemory(+result);\n      setResult('');\n    },\n\n    [ButtonType.Add]: () => {\n      setOperator('+');\n      setMemory(+result);\n      setResult('');\n    },\n\n    [ButtonType.Equal]: () => {\n      switch (operator) {\n        case '+':\n          setResult((memory + Number(result)).toString());\n          setMemory(+result);\n            break;\n\n        case '-':\n          setResult((memory - Number(result)).toString());\n          setMemory(+result);\n            break;\n\n        case '*':\n          setResult((memory * Number(result)).toString());\n          setMemory(+result);\n            break;\n\n        case '/':\n          setResult((memory / Number(result)).toString());\n          setMemory(+result);\n            break;\n\n          default: setResult(result);\n      }\n    },\n  };\n\n  return (\n    <div className=\"wrapper\">\n    <div className=\"result\">{result}</div>\n      <div className=\"calculator\">\n        {buttons.map(button => (\n          <Button \n            handler={handlerByButtonType[button.type]}\n            key={button.title}\n            button={button.title}\n            type={button.type}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import PropTypes from 'prop-types';\nimport React from 'react'\n\ninterface Props {\n  button: string,\n  type: string,\n  handler: (title: string) => void,\n}\n\nexport const Button: React.FC<Props> = (props) => {\n  const { button, handler } = props;\n\n  const handleButton = () => {\n    console.log(button);\n    handler(button)\n  }\n\n  return (\n    <div\n      className=\"operators__operator operator\"\n      onClick={handleButton}\n    >\n      {button}\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}